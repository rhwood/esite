#!/usr/bin/php
<?php
/*
	esite static website parser
	Copyright (C) 2005 Randall Wood.

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

/* internal data */
define(ESITE_VERSION, "0.2.0");
define(ESITE_COPYRIGHT_DATES, "2005, 2006");
define(ESITE_COPYRIGHT_HOLDERS, "Randall Wood");

/* block short php tags to prevent conflicts later */
ini_set('short_open_tag', 0);
/* include eSite library files */
/* the eSite library files are files that either provide library functions for use in templates
    or simply exist to make the parser easier to maintain. There may, in fact, be no library
    files, although if this script gets any more complex, there will be library files simply to
    preserve my own sanity. Randall Wood 09/17/05 */
/* this path should be ${prefix}/lib/esite when the parser is at ${prefix}/bin/esite */
set_include_path(get_include_path() . ':/usr/local/lib/esite');

class eSite_Parser {

	var $settings;

	function eSite_Parser() {
		// critical default settings //
		$this->settings['global']['library'] = '/usr/local/lib/esite';

		// useful default settings //
		$this->settings['site']['source'] = ".";
		$this->settings['site']['build'] = $this->settings['site']['source'] . "/build";
		$this->settings['site']['intermediate'] = $this->settings['site']['build'] . "/intermediate";
		$this->settings['site']['templates'] = $this->settings['site']['source'] . "/lib";
		$this->settings['site']['exclude'] = "build;lib";
		$this->settings['site']['default_template'] = "default.esite";
		$this->settings['site']['scripts'] = $this->settings['site']['source'] . "/lib";
		$this->settings['files']['parse'] = "html;php";
		$this->settings['files']['copy'] = "*";
		$this->settings['files']['ignore'] = "esite;tidy.log";
		$this->settings['files']['backup'] = "~";
		// debugging can be controlled from the configuration files //
		$this->settings['debug']['list_parsed_files'] = 0;
		$this->settings['debug']['list_copied_files'] = 0;
		$this->settings['debug']['keep_intermediate_files'] = 0;
		$this->settings['debug']['list_ini_settings'] = 0;
		$this->settings['debug']['print_debugging_statement'] = 0;
		$this->settings['debug']['print_exec_command'] = 0;

		$this->initialize();
		$this->include_library();
	}

	/*	function initialize(string $ini_file = '')
		read the eSite preferences set from the *.ini files
		this functionality has been seperated out from eSite_Parser::prepare so that it may be
		used very early in the script execution
	 */
	function initialize($ini_file = '') {
		if ($ini_file) {
			if (file_exists($ini_file)) {
				$this->settings = eSite_Parser::ini_array_merge($this->settings, parse_ini_file(realpath($ini_file), 1));
				// not reliable if tested against a debug statement set
				// in a .ini file
				// echo ("initializing from $ini_file\n");
			}
		} else {
			// defaults location
			// package/port maintainers should set /usr/local to ${prefix}
			$this->initialize("/usr/local/etc/esite.ini");
			// LINUX/UNIX standard system-wide location
			$this->initialize("/etc/esite.ini");
			// Mac OS X standard system-wide location
			$this->initialize("/Library/Preferences/net.sourceforge.esite.ini");
			// LINUX/UNIX standard per-user location
			$this->initialize("{$_ENV["HOME"]}/esite.ini");
			// Mac OS X standard per-user location
			$this->initialize("{$_ENV["HOME"]}/Library/Preferences/net.sourceforge.esite.ini");
			// current directory
			$this->initialize("./esite.ini");
			if ($this->settings['debug']['list_ini_settings']) {
				var_dump($this->settings);
			}
		}
	}

	function main($args) {
		// toggle off getopts warning on Mac OS X
		$error_level = error_reporting(1);
		$esite_options = getopt("bce:hilp:s:tv", array('build', 'clean', 'exec:', 'help', 'info', 'links', 'parse:', 'script:', 'tidy', 'version'));
		// return error reporting to original state
		error_reporting($error_level);
		if (!$esite_options) {
				$esite_options = array('build' => 0);
		}
		foreach (array_keys($esite_options) as $option) {
			switch ($option) {
			case 'b';
			case 'build':
				$this->prepare();
				$this->preprocess_templates($this->settings['site']['templates'], "");
				$this->build($this->settings['site']['source'], "");
				$this->cleanup();
				break;
			case 'c':
			case 'clean':
				$this->cleanup();
				break;
			case 'e':
			case 'exec':
				$this->prepare();
				esite_exec($esite_options[$option], $args, '');
				break;
			case 'h':
			case 'help':
				eSite_Parser::help();
				break(2);
			case 'i':
			case 'info':
				phpinfo();
				break(2);
			case 'l':
			case 'links':
				$this->prepare();
				break;
			case 'p':
			case 'parse':
				$this->prepare();
				$this->parse($esite_options[$option], 0);
				break;
			case 's':
			case 'script':
				$this->prepare();
				esite_exec($esite_options[$option], $args, $this->settings['site']['scripts']);
				break;
			case 't':
			case 'tidy':
				$this->prepare();
				$this->tidy($this->settings['site']['build'], "");
				break;
			case 'v':
			case 'version':
				eSite_Parser::version();
				break(2);
			}
		}
	}

	/* function build(string $dir)
		Build the website located in the source directory
		Recurses for all subdirectories
	 */
	function build($working_source) {
		$contents = glob($working_source . "/*");
		foreach ($contents as $file) {
			$info = pathinfo($file);
			if (is_dir($file)) {
				if (!in_array(basename($file), $this->settings['site']['exclude'])) {
					$this->build($file, "");
				}
			} else {
				if (!in_array($info['extension'], $this->settings['files']['ignore'])) {
					$dir = $this->settings['site']['build'] . str_replace($this->settings['site']['source'],"", $working_source);
					if (!is_dir($dir)) {
						if (version_compare(phpversion(), "5.0.0", ">=")) {
							mkdir($dir, 0755, TRUE);
						} else {
							mkdir($dir, 0755);
						}
					}
					if (in_array($info['extension'], $this->settings['files']['parse'])) {
						$dir = $this->settings['site']['intermediate'] . str_replace($this->settings['site']['source'],"", $working_source);
						if (!is_dir($dir)) {
							if (version_compare(phpversion(), "5.0.0", ">=")) {
								mkdir($dir, 0755, TRUE);
							} else {
								mkdir($dir, 0755);
							}
						}
						$this->parse($file, 0);
					} else {
						if ($this->settings['debug']['list_copied_files']) {
							echo "$file (copied)\n";
						}
						copy($file, $this->settings['site']['build'] . '/' . $file);
					}			
				} else {
					// ignore
				}
			}
		}
	}

	/* function tidy(string $dir)
		Run html-tidy against the website, storing the results in the source dir at filename.tidy.log
	 */
	function tidy($working_source) {
		$contents = glob($working_source . "/*");
		foreach ($contents as $file) {
			$file = str_replace($this->settings['site']['build'] . "/", "", $file);
			$info = pathinfo($file);
			if (is_dir($file)) {
				if (!in_array(basename($file), $this->settings['site']['exclude'])) {
					$this->tidy($file, "");
				}
			} else {
				if (!in_array($info['extension'], $this->settings['files']['ignore'])) {
					$dir = $this->settings['site']['source'] . "/" . str_replace($this->settings['site']['build'],"", $working_source);
					if (!is_dir($dir)) {
						mkdir($dir);
					}
					if (in_array($info['extension'], $this->settings['files']['parse'])) {
						$dir = $this->settings['site']['source'] . "/" . str_replace($this->settings['site']['build'],"", $working_source);
						$file = str_replace("$working_source/", "", $file);
						if (!is_dir($dir)) {
							mkdir($dir);
						}
						esite_exec("tidy", array("-f", "$dir/$file.tidy.log", "-e", "$working_source/$file"), '');
					}			
				}
			}
		}
	}

	/*	function parse(string $file)
		Parse a source file, taking care to prep it for running
		through a template first
	 */
	/* TODO
		* make the parser handle [ESITE] markers more intelligent
		* add a valid [ESITE TEMPLATE template_name] marker
		* add a valid [ESITE VAR name=value] marker
		* make sure that [ESITE] markers accept \ escaped ]s
	 */
	function parse($esite_file, $esite_is_template) {
		$esite_write_file_to_name = $esite_file;
		if ($this->settings['debug']['list_parsed_files']) {
			echo ($esite_is_template) ? "$esite_file (parsed template)\n" : "$esite_file (parsed)\n";
		}
		$esite_data = file_get_contents("$esite_file");
		$esite_data = preg_replace('/\[ESITE(\s+)TITLE(\s*)=(\s*)(.*?)(\s*)\]/i', '$esite_title = "\4";', $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)TITLE(\s*)(.+?)(\s*)\]/i', '$esite_title = "\3";', $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)ROOT(\s*)=(\s*)(.*?)(\s*)\]/i', '$esite_root = "\3";', $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)ROOT(\s*)(.+?)(\s*)\]/i', '$esite_root = "\3";', $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)ROOT(\s*)\]/i', "<?esite echo(\$esite_root); ?>", $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)BEGIN(\s*)\]/i', "\n\$esite_content = <<<END_OF_CONTENT\n", $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)END(\s*)\]/i', "\nEND_OF_CONTENT;\n", $esite_data);
	        $esite_data = preg_replace('/\[ESITE(\s+)BEGIN(\s*)(.+?)(\s*)\]/i', "\n\$\3 = <<<END_OF_CONTENT\n", $esite_data);
	        $esite_data = preg_replace('/\[ESITE(\s+)END(\s*)(.+?)(\s*)\]/i', "\nEND_OF_CONTENT;\n", $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)PARSE(\s+)CONTENT(\s*)\]/i', "<?esite esite_parse_content(\$esite_content); ?>", $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)PARSE(\s+)TITLE(\s*)\]/i', "<?esite echo(\$esite_title); ?>", $esite_data);
	        $esite_data = preg_replace('/\[ESITE(\s+)PARSE(\s+)(.+?)(\s*)\]/i', "<?esite esite_parse_content(\$\3); ?>", $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)TITLE(\s*)\]/i', "<?esite echo(\$esite_title); ?>", $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)CHANGE(\s+)NAME(\s+)TO(\s+)(.+?)(\s*)\]/i', '$esite_write_file_to_name = "\5"; ?>', $esite_data);
		$esite_data = $this->parse_variables($esite_data);
		if (!$esite_is_template) {
			if (substr(trim($esite_data), 0, 7) != "<?esite") {
				$esite_data = "<?esite\n" . $esite_data . "\nrequire('" . $this->settings['site']['intermediate'] . "/esite-templates/" . $this->settings['site']['default_template'] . "');\n?>\n";
			}
		}
		$esite_data = str_replace("<?esite", "<?php", str_replace("<?php", "<?esite-php", $esite_data));
		$esite_data = str_replace("[--ESITE", "[ESITE", $esite_data);
		$esite_handle = (!$esite_is_template) ?
			fopen($this->settings['site']['intermediate'] . "/" . str_replace($this->settings['site']['source'], "", "$esite_file"), "w") :
			fopen($this->settings['site']['intermediate'] . "/esite-templates/" . str_replace($this->settings['site']['templates'], "", "$esite_file"), "w");
		fwrite($esite_handle, $esite_data);
		fclose($esite_handle);
		if (!$esite_is_template) {
			$esite_root = str_repeat('../', (count(split('/', str_replace($this->settings['site']['source'], "", $esite_file)))) - 2);
			ob_start();
			include($this->settings['site']['intermediate'] . str_replace($this->settings['site']['source'], "", $esite_file));
			$esite_data = ob_get_contents();
			ob_end_clean();
			$esite_data = str_replace("<?esite-php", "<?php", $esite_data);
			if ($esite_file != $esite_write_file_to_name) {
				$esite_write_file_to_name = str_replace(basename($esite_file), $esite_write_file_to_name, $esite_file);
				if($this->settings['debug']['print_debugging_statement']) {
					echo("File name change from $esite_file to $esite_write_file_to_name\n");
				}
			}
			$esite_handle = fopen($this->settings['site']['build'] . str_replace($this->settings['site']['source'], "", $esite_write_file_to_name), "w");
			fwrite($esite_handle, $esite_data);
			fclose($esite_handle);
			if (!$this->settings['debug']['keep_intermediate_files']) {
				unlink($this->settings['site']['intermediate'] . str_replace($this->settings['site']['source'], "", $esite_file));
			}
		}
	}

	/*	function string parse_variables(string $esite_data)
		Parse $esite_data to replace [ESITE VARIABLE=DATA] into $esite_variable = data php code structures
	 */
	function parse_variables($esite_data) {
		$esite_data = preg_replace('/\[ESITE(\s+)(\w+)(\s*)=(\s*)(\d+)(\s*)\]/i', '$\2 = \5;', $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)(\w+)(\s*)=(\s*)(\w+)(\s*)\]/i', '$\2 = "\5";', $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)(\w+)(\s*)=(\s*)([\'\"])(.*?)(\5)(\s*)\]/i', '$\2 = \5\6\5;', $esite_data);
		$esite_data = preg_replace('/\[ESITE(\s+)(\w+)(\s*)\]/i', '<?esite echo(\$\2); ?>', $esite_data);
		return $esite_data;
	}

	/* function preprocess_templates(string $dir)
		Preprocess all templates prior to building the website
	 */
	function preprocess_templates($working_source, $working_name) {
		$contents = glob($working_source . "/*");
		foreach ($contents as $file) {
			if (is_dir("$file/")) {
				if (!in_array(basename($file), $this->settings['site']['exclude'])) {
					$this->preprocess_templates($file, "");
				}
			} else {
				$extension = pathinfo($file);
				$extension = $extension['extension'];
				if ($extension == 'esite') {
					$dir = $this->settings['site']['intermediate'] . "/esite-templates/" . str_replace($this->settings['site']['templates'],"", $working_source);
					if (!is_dir($dir)) {
						mkdir($dir);
					}
					$this->parse($file, 1);
				}
			}
		}
	}

	/* function $esite_parser->prepare()
		Prepare for building or parsing
	 */
	function prepare() {
		clearstatcache();
		if ($this->settings['site']['source'] == '.') { $this->settings['site']['source'] = './'; }
		if ($this->settings['site']['build'] == '.') { $this->settings['site']['build'] = './'; }
		if ($this->settings['site']['intermediate'] == '.') { $this->settings['site']['intermediate'] = './'; }
		if (!is_dir($this->settings['site']['build'])) { mkdir($this->settings['site']['build']); }
		if (!is_dir($this->settings['site']['intermediate'])) { mkdir($this->settings['site']['intermediate']); }
		if (!is_dir($this->settings['site']['intermediate'] . '/esite-templates')) { mkdir($this->settings['site']['intermediate'] . '/esite-templates'); }
		set_include_path(get_include_path() . ':' . realpath($this->settings['site']['intermediate'] . '/esite-templates'));
		$this->settings['site']['exclude'] = explode(";", $this->settings['site']['exclude']);
		// test that exclude_dirs has a ;
		// if not, $this->settings['site']['exclude'][] = $this->settings['site']['exclude'];
		// the following logic fails
		//	foreach ($this->settings['site']['exclude'] as $dir) {
		//		if (!instr($this->settings['site']['source'], $dir)) {
		//			$this->settings['site']['exclude'][] = "$this->settings['site']['source']/$dir";
		//		}
		//	}
		$this->settings['files']['parse'] = explode(";", $this->settings['files']['parse']);
		$this->settings['files']['copy'] = explode(";", $this->settings['files']['copy']);
		$this->settings['files']['ignore'] = explode(";", $this->settings['files']['ignore']);
		$this->settings['files']['backup'] = explode(";", $this->settings['files']['backup']);
		foreach ($this->settings['files']['parse'] as $extension) {
			foreach ($this->settings['files']['backup'] as $backup) {
				$this->settings['files']['ignore'][] = $extension . $backup;
			}
		}
		foreach ($this->settings['files']['copy'] as $extension) {
			foreach ($this->settings['files']['backup'] as $backup) {
				$this->settings['files']['ignore'][] = $extension . $backup;
			}
		}
		foreach ($this->settings['files']['ignore'] as $extension) {
			foreach ($this->settings['files']['backup'] as $backup) {
				$this->settings['files']['ignore'][] = $extension . $backup;
			}
		}
		foreach ($this->settings['files']['backup'] as $extension) {
			$this->settings['files']['ignore'][] = $extension;
		}
	}

	/* function $esite_parser->cleanup()
		Remove the intermediate directory once complete
	 */
	function cleanup() {
		if (!$this->settings['debug']['keep_intermediate_files']) {
			eSite_Parser::rmdir($this->settings['site']['intermediate']);
		}
	}

	/* function ini_array_merge(array $ini, array $new_ini)
		Merge two ini arrays together, replacing values in
		$ini with values from $new_ini
	 */
	function ini_array_merge($ini, $new_ini) {
		$keys = array_keys($ini);
		foreach($keys as $section) {
			$ini[$section] = array_merge($ini[$section], $new_ini[$section]);
		}
		return $ini;
	}

	/*	function include_library()
		Include eSite library files that are critical for the parser to operate.
	 */
	function include_library() {
		set_include_path(get_include_path() . ':' . $this->settings['global']['library']);
		// any required files would be included here. use require() to force an error
	//	require_once(esite/internal/parser.php);
	}

	/*	function rmdir(string $dir)
		Remove a directory and all its contents
	 */
	function rmdir($dir) {
		if($objs = glob($dir."/*")){
			foreach($objs as $obj) {
				is_dir($obj) ? eSite_Parser::rmdir($obj) : unlink($obj);
			}
		}
		rmdir($dir);
	}

	/* function help()
		display user help text
	 */
	function help() {
		$text = <<<EOC
	esite [build|clean|parse|version|help] [file]
	esite [exec|script] [...]
	esite [check] [links|tidy]
	build   build a website
	check	run the site against tidy or a links checker
	clean   cleanup after the build process
	exec    run a program from within esite
	script  run a helper process with supplied parameters
	parse   parse a file
	version display version and copyright
	help    display this information
EOC;
		echo "$text\n";
	}

	/* function version()
		display version and copyright
	 */
	function version() {
		echo "esite version " . ESITE_VERSION . ", ";
		echo "Copyright (C) " . ESITE_COPYRIGHT_DATES . " by " . ESITE_COPYRIGHT_HOLDERS . ".\n";
		echo "esite comes with ABSOLUTELY NO WARRANTY.\n";
		echo "This is free software, and you are welcome to redistribute it under certain\nconditions.\n";
	}

}

/*
 * the following functions are code library to be used in templates or documents
 */

/*	function esite_exec(string $program, array $parameters, string $path = '')
	execute $path/$program (or $program if $path == '') with $parameters
 */
function esite_exec($program, $parameters, $path = '') {
	global $esite_parser;
	if ($program == $parameters[2]) {
		array_shift($parameters);
		array_shift($parameters);
	}
	$parameters = implode(" ", $parameters);
	if ($path) {
		if ($esite_parser->settings['debug']['print_exec_command']) {
			echo("$path/$program $parameters\n");
		}
		exec("$path/$program $parameters");
	} else {
		if ($esite_parser->settings['debug']['print_exec_command']) {
			echo("$program $parameters\n");
		}
		exec("$program $parameters");
	}
}

/*	function esite_parse_content()
	Include all material between the [ESITE BEGIN] and [ESITE END] tags, or if those tags were
	not used, include the contents of the $esite_content variable in the document.
 */
function esite_parse_content($esite_content) {
	$content_file = tempnam("/tmp", "parser");
	$content_header = fopen($content_file, "w");
	fwrite($content_header, $esite_content);
	fclose($content_header);
	include($content_file);
	unlink($content_file);
}

/*	function esite_debug(string $flag = "print_debugging_statement")
	return if a $flag has been set in the [debug] section of esite.ini, defaults to 
	"print_debugging_statement"
 */
function esite_debug($flag = "print_debugging_statement") {
	global $esite_parser;
	return $esite_parser->settings['debug'][$flag];
}

/*	function esite_setting(string $section, string $setting)
	return the value of a setting
 */
function esite_setting($section, $setting) {
	global $esite_parser;
	return $esite_parser->settings[$section][$setting];
}

$esite_parser = new eSite_Parser($argv);
$esite_parser->main($argv);

?>
